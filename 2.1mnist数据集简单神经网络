import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data


# 载入数据集
mnist = input_data.read_data_sets("MNIST_data/", one_hot=True)
#定义批次大小
batch_size = 50
#计算一共有多少批次
n_batch = mnist.train.num_examples // batch_size

#定义两个占位符
x = tf.placeholder(tf.float32,[None,784])
y = tf.placeholder(tf.float32,[None,10])

#定义两层神经网络

weight_1 = tf.Variable(tf.zeros([784,32]))
bias_L1 = tf.Variable(tf.zeros([32]))
wx_plus_b_L1 = tf.matmul(x,weight_1) + bias_L1
L1 = tf.nn.tanh(wx_plus_b_L1)

weight_2 = tf.Variable(tf.random_normal([32,10]))
bias_L2 = tf.Variable(tf.zeros([10]))
wx_plus_b_L2 = tf.matmul(L1,weight_2) + bias_L2
prediction = tf.nn.softmax(wx_plus_b_L2)

#定义loss
# loss = tf.reduce_mean(tf.square(y-prediction))
#交叉熵
loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y,logits=prediction))
#使用梯度下降法
train_step = tf.train.GradientDescentOptimizer(0.1).minimize(loss)

#存放结果
corrent_prediction = tf.equal(tf.arg_max(y,1),tf.arg_max(prediction,1))
#求解准确率
accuracy = tf.reduce_mean(tf.cast(corrent_prediction,tf.float32))

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    for step in range(20):
        for batch in range(n_batch):
            batch_x,batch_y = mnist.train.next_batch(batch_size)
            sess.run(train_step,feed_dict = {x:batch_x,y:batch_y})
        acc = sess.run(accuracy,feed_dict = { x: mnist.test.images,y:mnist.test.labels})
        print('step'+ str(step)+',Test accuracy is '+ str(acc))

#最终大概有95%的分类成功率
