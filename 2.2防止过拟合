import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data

# 载入数据集
mnist = input_data.read_data_sets("MNIST_data/", one_hot=True)

#定义批次大小
batch_size = 100
#计算一共有多少批次
n_batch = mnist.train.num_examples // batch_size

#定义2个占位符
x = tf.placeholder(tf.float32,[None,784])
y = tf.placeholder(tf.float32,[None,10])
lr = tf.Variable(0.001,tf.float32)

#添加dropout
keep_prob= tf.placeholder(tf.float32)
#定义神经网络
weight_1 = tf.Variable(tf.truncated_normal([784,500],stddev=0.1))
bias_L1 = tf.Variable(tf.zeros([500])+0.1)
wx_plus_b_L1 = tf.matmul(x,weight_1) + bias_L1
L1 = tf.nn.tanh(wx_plus_b_L1)
#添加dropout
L1_drop = tf.nn.dropout(L1,keep_prob)

weight_2 = tf.Variable(tf.truncated_normal([500,300],stddev=0.1))
bias_L2 = tf.Variable(tf.zeros([300])+0.1)
wx_plus_b_L2= tf.matmul(L1_drop,weight_2) + bias_L2
L2 = tf.nn.tanh(wx_plus_b_L2)
L2_drop = tf.nn.dropout(L2,keep_prob)

weight_3 = tf.Variable(tf.truncated_normal([300,10],stddev=0.1))
bias_L3= tf.Variable(tf.zeros([10]))
wx_plus_b_L3 = tf.matmul(L2_drop,weight_3) + bias_L3
L3 = tf.nn.tanh(wx_plus_b_L3)
prediction = tf.nn.softmax(L3)

#添加L2正则化
tf.add_to_collection(tf.GraphKeys.WEIGHTS, weight_1)
tf.add_to_collection(tf.GraphKeys.WEIGHTS, weight_2)
tf.add_to_collection(tf.GraphKeys.WEIGHTS, weight_3)
regularizer = tf.contrib.layers.l2_regularizer(scale=5.0 / 50000)
reg_term = tf.contrib.layers.apply_regularization(regularizer)


#交叉熵
loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y,logits=prediction)+
        reg_term)

#使用adamoptimizer优化器
train_step = tf.train.AdamOptimizer(lr).minimize(loss)
#存放结果
corrent_prediction = tf.equal(tf.arg_max(y,1),tf.arg_max(prediction,1))
#求解准确率
accuracy = tf.reduce_mean(tf.cast(corrent_prediction,tf.float32))

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    for step in range(100):
    #选择动态学习率，使得随训练次数的添加，学习率越来越小
        sess.run(tf.assign(ref = lr,value=0.001*(0.95** step)))
        for batch in range(n_batch):
            batch_x,batch_y = mnist.train.next_batch(batch_size)
            sess.run(train_step,feed_dict = {x:batch_x,y:batch_y,keep_prob:0.7})
        learning_rate = sess.run(lr)
        acc = sess.run(accuracy,feed_dict = { x: mnist.test.images,y:mnist.test.labels,keep_prob:1.0})
        print('step'+ str(step)+',Test accuracy is '+ str(acc)+' learning_rating is ' + str(learning_rate))
