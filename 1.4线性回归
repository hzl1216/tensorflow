import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt #用来绘制简单图表

#使用numpy生成生成两百个从-0.5到0.5生成的200均匀生成的两百个点,[:,np.newaxis]为一个的维度
x_data = np.linspace(-0.5,0.5,200)[:,np.newaxis]

noise = np.random.normal(0,0.02,x_data.shape)#在均匀生成的点上添加200个随机噪音

#生成y
y_data = np.square(x_data) + noise

#定义两个placeholder
x = tf.placeholder(tf.float32,[None,1])
y = tf.placeholder(tf.float32,[None,1])

#定义神经网络中间层
weights_L1 = tf.Variable(tf.random_normal([1,10]))
biases_L1 = tf.Variable(tf.zeros([1,10]))
wx_plus_b_L1 = tf.matmul(x,weights_L1) + biases_L1
L1 = tf.nn.tanh(wx_plus_b_L1)

# 定义神经网络输出层
weights_L2 = tf.Variable(tf.random_normal([10,1]))
biases_L2 = tf.Variable(tf.zeros([1,1]))
wx_plus_b_L2 = tf.matmul(L1,weights_L2) + biases_L2
prediction = tf.nn.tanh(wx_plus_b_L2)

# 二次代价函数
loss = tf.reduce_mean(tf.square(y- prediction))
#使用梯度下降算法训练
train_step = tf.train.GradientDescentOptimizer(0.1).minimize(loss)

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    for _ in range(2000):
        sess.run(train_step,feed_dict = { x: x_data,y: y_data})
    prediction_value = sess.run(prediction,feed_dict = {x: x_data })
    #画图
    plt.figure()
    plt.scatter(x_data,y_data)
    plt.plot(x_data,prediction_value,'r-',lw = 5)
    plt.show()
