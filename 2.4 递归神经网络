import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data
import datetime
starttime = datetime.datetime.now()

mnist = input_data.read_data_sets("MNIST_data/", one_hot=True)

n_input = 28 #输入一行，一行28个数据
max_time = 28 #一共28行
lstm_size = 100
n_classes = 10 #10个分类
batch_size = 100 


#定义两个占位符
x = tf.placeholder(tf.float32,[None,784])
y = tf.placeholder(tf.float32,[None,10])

weight = tf.Variable(tf.truncated_normal( shape = [lstm_size,n_classes],stddev= 0.1))
bias = tf.Variable(tf.constant(0.1,shape = [n_classes]))

def RNN(X):
    inputs = tf.reshape(X,[-1,n_input,max_time])
    #定义lstm基本cell
    lstm_cell = tf.contrib.rnn.BasicLSTMCell(lstm_size)
    outputs,final_state = tf.nn.dynamic_rnn(lstm_cell,inputs,dtype = tf.float32)
    result = tf.nn.softmax(tf.matmul(final_state[1],weight)+bias)
    return result

#计算RNN返回结果
prediction  = RNN(x)

cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y,logits=prediction))
train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)
correct_prediction = tf.equal(tf.argmax(prediction,1), tf.argmax(y,1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction, "float"))
tf.summary.scalar('accuracy',accuracy)
with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    for i in range(10000):
        batch_x , batch_y = mnist.train.next_batch(batch_size)
        sess.run(train_step ,feed_dict = { x:batch_x, y:batch_y})
        if i % 100 ==0:
            cross,train_accuracy = sess.run([cross_entropy,accuracy],feed_dict = { x:mnist.test.images,y:mnist.test.labels})
            print(cross)
            print ("step %d, training accuracy %g"%(i, train_accuracy))
    train_accuracy =   sess.run(accuracy,feed_dict = { x:mnist.test.images,y:mnist.test.labels})
    print ("training accuracy %g"%( train_accuracy))
endtime = datetime.datetime.now()
print (endtime - starttime)
